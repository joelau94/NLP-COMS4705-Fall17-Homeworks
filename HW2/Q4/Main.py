#!/usr/bin/python

import os
import json
from collections import Counter

class RmRare(object):
	def __init__(self, min_word_freq=5):
		super(RmRare, self).__init__()
		self.word_freq = Counter()
		self.min_word_freq = min_word_freq

	def get_word_freq(self, count_file='cfg.counts'):
		'''
		Calculate word frequencies from count file generated by count_cfg_freq.py
		'''
		for line in open(count_file,'r'):
			rule = line.strip().split()
			if rule[1]=='UNARYRULE':
				self.word_freq.update({ str(rule[3]): int(rule[0]) })

	def __call__(self, node):
		'''
		Recursively substitute rare words with '_RARE_'
		'''
		if len(node) == 2: # case of unary rule: right hand side is terminal word
			if self.word_freq[node[1]] < self.min_word_freq:
				node[1] = '_RARE_'
		elif len(node) == 3: # case of binary rule: deal with non-terminals on right hand side
			self.__call__(node[1])
			self.__call__(node[2])
		
def file_rm_rare(in_file='parse_train.dat', out_file='parse_train.RARE.dat', min_word_freq=5):
	os.system('python count_cfg_freq.py parse_train.dat > cfg.counts')
	rm_rare = RmRare(min_word_freq=min_word_freq)
	rm_rare.get_word_freq() # calculate word frequency
	corpus = map(json.loads, open(in_file, 'r').readlines()) # load corpus
	map(rm_rare, corpus) # substitute rare words in corpus
	open(out_file, 'w+').write('\n'.join( map(json.dumps, corpus) )) # write to file
